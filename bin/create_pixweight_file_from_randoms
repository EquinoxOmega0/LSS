#!/usr/bin/env python

import argparse
import textwrap
import os
from glob import glob
from time import time
start = time()

from LSS.imaging.sky_maps import create_pixweight_file, get_lss_map_dir, rancat_name_to_pixweight_name

from desiutil.log import get_logger
log = get_logger()

# ADM the currently set default lss_map_dir.
lssmapdir = get_lss_map_dir()
# ADM a default HEALPixel size for output maps.
nside_out = 512

# ADM example input file.
egd = "/global/cfs/cdirs/desi/target/catalogs/dr9/0.49.0/randoms/resolve"
egrancat1 = os.path.join(egd, "randoms-1-0.fits")
egrancat2 = egrancat1.replace("0.fits", "*.fits")
egrancat3 = egrancat1.replace("0.fits", "?.fits")
egrancat4 = egrancat1.replace("0.fits", "[2-9].fits")
# ADM example output file name.
egoutfn = rancat_name_to_pixweight_name(egrancat1)

ap = argparse.ArumentParser(description="Create a pixweight file from randoms filtered by bitmasks",
                    formatter_class=argparse.RawDescriptionHelpFormatter, epilog=textwrap.dedent("""
                    Examples:
                    make_imaging_map_mask_catalogs {}
                    make_imaging_map_mask_catalogs "{}"
                    make_imaging_map_mask_catalogs "{}"
                    make_imaging_map_mask_catalogs "{}"
                    """.format(egrancat1, egrancat2, egrancat3, egrancat4)))
ap.add_argument("rancatname",
                help='Full path to a random catalog. Can process multiple catalogs' +
                ' together by passing a wildcard recognized by glob.')
ap.add_argument("fieldslist",
                help='List of field names (column names) to process.')
ap.add_argument("masklist",
                help="Masks associated with `fieldslist` fields/columns. Entries must" +
                " be either an integer or a list of mask names (strings), e.g.: " +
                " [131072, ['MASKBITS', 'ELG_GAIA'], ['KAPPA_PLANCK'], 4063232]")
ap.add_argument("nside_out", type=int,
                help='Resolution (HEALPix nside) at which to build the output (NESTED)' +
                ' pixweight map (defaults to {})'.format(nside_out),
                default=nside_out)
ap.add_argument("--lssmapdir",
                help='Directory that hosts sky maps. Default is $LSS_MAP_DIR (currently {}).'
                .format(lssmapdir),
                default=lssmapdir)
ap.add_argument("outfn",
                help='Output filename. If not passed, will default to something like' +
                ' {} for and input `rancatname` of {}'.format(egoutfn, egrancat1))

ns = ap.parse_args()

# ADM parse the rancatname in case a wildcard was passed.
# ADM (this will also embed a single catalog in a list).
rancatlist = sorted(glob(ns.rancatname))
log.info("Processing {} input files: {}".format(len(rancatlist), rancatlist))

for rancatname in rancatlist:
    log.info("Creating pixweight file for {}...t={:.1f}s".format(
        rancatname, time()-start))
    _ = create_pixweight_file(rancatlist, fieldslist, masklist, nside_out=512,
                          lssmapdir=None, outfn=None
