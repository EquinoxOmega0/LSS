#!/usr/bin/env python

import argparse
import textwrap
import os
import json
from glob import glob
from time import time

from LSS.imaging.sky_maps import create_pixweight_file, get_lss_map_dir, rancat_name_to_pixweight_name

from desiutil.log import get_logger
log = get_logger()
start = time()

# ADM the currently set default lss_map_dir.
lssmapdir = get_lss_map_dir()
# ADM a default HEALPixel size for output maps.
nside_out = 512

# ADM example input file.
egd = "/global/cfs/cdirs/desi/target/catalogs/dr9/0.49.0/randoms/resolve"
egrancat1 = os.path.join(egd, "randoms-1-0.fits")
egrancat2 = egrancat1.replace("0.fits", "*.fits")
egrancat3 = egrancat1.replace("0.fits", "?.fits")
egrancat4 = egrancat1.replace("0.fits", "[2-9].fits")
# ADM example output file name.
egoutfn = rancat_name_to_pixweight_name(egrancat1)
# ADM other example inputs.
egfields = """["GALDEPTH_G", "HALPHA_ERROR", "APFLUX_IVAR_R", "WISEMASK_W2", "CALIB_Z"]"""
egmasks = """[131072, ["MASKBITS", "ARTIFACTS", "ELG_GAIA", "LRG_UNWISE", "EBV_SGF14"], 131072, ["KAPPA_PLANCK"], 4063232]"""
egfn = '$SCRATCH/pixweight.fits'
ehs = " (see the examples below for extra help!)"

ap = argparse.ArgumentParser(
    description="Create a pixweight file from randoms, filtered by bitmasks",
    formatter_class=argparse.RawDescriptionHelpFormatter, epilog=textwrap.dedent("""
    Examples:
    create_pixweight_file_from_randoms {} '{}' '{}' --outfn {}
    create_pixweight_file_from_randoms '{}' '{}' '{}' --outfn {}
    create_pixweight_file_from_randoms '{}' '{}' '{}' --outfn {}
    create_pixweight_file_from_randoms '{}' '{}' '{}' --outfn {}
    """.format(egrancat1, egfields, egmasks, egfn,
               egrancat2, egfields, egmasks, egfn,
               egrancat3, egfields, egmasks, egfn,
               egrancat4, egfields, egmasks, egfn)))
ap.add_argument("rancatname",
                help='Full path to a random catalog. Can process multiple catalogs' +
                ' together by passing a wildcard recognized by glob')
ap.add_argument("fields",
                help='List of field names (column names) to process. Must be passed' +
                ' as a list of double-quoted strings in single quotes' + ehs)
ap.add_argument("masks",
                help="Masks associated with `fields` field/column names. Entries must" +
                " be either an integer or a list of mask names (strings in double quotes)"
                " inside single quotes" + ehs)
ap.add_argument("--nside_out", type=int,
                help='Resolution (HEALPix nside) at which to build the output (NESTED)' +
                ' pixweight map (defaults to {})'.format(nside_out),
                default=nside_out)
ap.add_argument("--lssmapdir",
                help='Directory that hosts sky maps. Default is $LSS_MAP_DIR (currently {})'
                .format(lssmapdir),
                default=lssmapdir)
ap.add_argument("--outfn",
                help='Output filename. If not passed, will default to something like' +
                ' {} for an input `rancatname` of {}'.format(egoutfn, egrancat1))

ns = ap.parse_args()

# ADM parse the rancatname in case a wildcard was passed.
# ADM (this will also embed a single catalog in a list).
rancatlist = sorted(glob(ns.rancatname))
log.info("Processing {} input files: {}".format(len(rancatlist), rancatlist))

# ADM parse the fieldslist and masklist using the json library.
fieldslist = json.loads(ns.fields)
masklist = json.loads(ns.masks)

_ = create_pixweight_file(rancatlist, fieldslist, masklist, nside_out=ns.nside_out,
                          lssmapdir=ns.lssmapdir, outfn=ns.outfn)
